/**
 * Utility functions for handling form data and filtering auto-generated fields
 */

export interface ColumnInfo {
  name: string
  data_type: string
  is_nullable: boolean
  is_identity?: boolean
}

/**
 * Fields that are typically auto-generated by the database and should be excluded from forms
 */
export const AUTO_GENERATED_FIELDS = ['id', 'created_at', 'updated_at'] as const

/**
 * Check if a field is auto-generated and should be excluded from forms
 */
export function isAutoGeneratedField(fieldName: string, columnInfo?: ColumnInfo): boolean {
  // Check if it's in the common auto-generated fields list
  if (AUTO_GENERATED_FIELDS.includes(fieldName as typeof AUTO_GENERATED_FIELDS[number])) {
    return true
  }

  // Check if it's marked as identity/auto-increment in database
  if (columnInfo?.is_identity) {
    return true
  }

  // Check for timestamp fields that are commonly auto-generated
  if (fieldName.endsWith('_at') || fieldName.endsWith('_time')) {
    return true
  }

  return false
}

/**
 * Filter out auto-generated fields from column definitions
 */
export function filterEditableColumns(columns: ColumnInfo[]): ColumnInfo[] {
  return columns.filter(column => !isAutoGeneratedField(column.name, column))
}

/**
 * Remove auto-generated fields from form data object
 */
export function removeAutoGeneratedFields<T extends Record<string, unknown>>(
  data: T,
  columns?: ColumnInfo[]
): Omit<T, 'id' | 'created_at' | 'updated_at'> {
  const cleanData = { ...data }

  // Remove common auto-generated fields
  AUTO_GENERATED_FIELDS.forEach(field => {
    delete cleanData[field]
  })

  // Remove fields based on column info if provided
  if (columns) {
    columns.forEach(column => {
      if (isAutoGeneratedField(column.name, column)) {
        delete cleanData[column.name]
      }
    })
  }

  return cleanData
}

/**
 * Filter FormData to remove auto-generated fields
 */
export function filterFormData(formData: FormData, columns?: ColumnInfo[]): Record<string, FormDataEntryValue> {
  const cleanData: Record<string, FormDataEntryValue> = {}

  formData.forEach((value, key) => {
    const columnInfo = columns?.find(col => col.name === key)

    if (!isAutoGeneratedField(key, columnInfo)) {
      cleanData[key] = value
    }
  })

  return cleanData
}

/**
 * Get form field label with improved formatting
 */
export function getFieldLabel(fieldName: string): string {
  return fieldName
    .split('_')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ')
}

/**
 * Check if a field is required based on column info
 */
export function isFieldRequired(columnInfo?: ColumnInfo): boolean {
  return columnInfo ? !columnInfo.is_nullable : false
}
